//
//  NavigationViewController.m
//  Test1
//
//  Created by Administrator on 11/17/09.
//  Copyright 2009 Drexel University. All rights reserved.
//

#import "NavigationViewController.h"
#import "MainViewController.h"
#import "Test1AppDelegate.h"

#define MAP_TOOLBAR_INSET	40
#define MAP_HEIGHT			30
#define MAX_TEXT_SIZE		24
#define MIN_TEXT_SIZE		12


@implementation NavigationViewController

@synthesize myTimer, trackData, contentLoaded;
/*
 // The designated initializer.  Override if you create the controller programmatically and want to perform customization that is not appropriate for viewDidLoad.
- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil {
    if (self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil]) {
        // Custom initialization
    }
    return self;
}
*/

Test1AppDelegate * appDelegate;

BOOL memoryWarning = NO;

- (id) initWithTrack:(Track *)track 
{
	self = [super init];
	if (self != nil) {
		self.contentLoaded = NO;
		self.tabBarItem.image = [UIImage imageNamed:@"table_gray.png"];
		self.title = [track name];
		self.trackData = track;
		//pageViewControllerArray = [[NSMutableArray alloc] init];
		
		loadedTickmarkers = NO;
		
		animating = NO;
		userInterjected = FALSE;
		
		pagePosistion = -1;
		
		appDelegate = (Test1AppDelegate *)[[UIApplication sharedApplication] delegate];
		
		CGRect appFrame = [[UIScreen mainScreen] applicationFrame];
		UIView *view = [[UIView alloc] initWithFrame:appFrame];
		view.autoresizingMask = UIViewAutoresizingFlexibleHeight|UIViewAutoresizingFlexibleWidth;
		self.view = view;
		[view release];
		
		scrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 0, appFrame.size.height, appFrame.size.width)];
		scrollView.delegate = self;
		scrollView.pagingEnabled = YES;
		//scrollView.bounces = NO;
		NSInteger widthCount = [trackData.pages count];

		scrollView.contentSize = CGSizeMake(scrollView.frame.size.width * widthCount,
											scrollView.frame.size.height);
		scrollView.contentOffset = CGPointMake(0, 0);
		

		currentPage = [[PageViewController alloc] initWithTrack:trackData];
		nextPage = [[PageViewController alloc] initWithTrack:trackData];
//		UILabel * te = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, 100, 50)];
//		te.text = @"Current";
//		[currentPage.view addSubview:te];
//		[te release];
//		
//		UILabel * te2 = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, 100, 50)];
//		te2.text = @"Next";
//		[nextPage.view addSubview:te2];
//		[te2 release];
		

		[self applyNewIndex:0 pageController:currentPage];
		[self applyNewIndex:1 pageController:nextPage];
		[scrollView addSubview:currentPage.view];
		[scrollView addSubview:nextPage.view];
		[currentPage updateTextViews:YES];
		[nextPage updateTextViews:YES];
		
		[self.view addSubview:scrollView];
		
		UIToolbar * naviToolBar = [[UIToolbar alloc] initWithFrame:CGRectMake(0.0, 320 - MAP_HEIGHT, 480, MAP_HEIGHT)];
		[naviToolBar setBackgroundColor: [UIColor blackColor]];
		naviToolBar.tintColor =  [UIColor blackColor];

		UIBarButtonItem *flexibleSpace = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil];

		//UIImageView * upButton = [[[UIImageView alloc] initWithImage:[UIImage imageNamed:@"up.png"]] autorelease];
		UIButton * upButton = [[UIButton alloc] initWithFrame:CGRectMake(0, 0, 22, 25)];
		upButton.userInteractionEnabled = YES;
		upButton.tag = @"up";
		[upButton setBackgroundImage:[UIImage imageNamed:@"fontUp.png"] forState:UIControlStateNormal];
		[upButton addTarget:self action:@selector(changeTextSize:) forControlEvents:UIControlEventTouchDown];
		
		UIButton * downButton = [[UIButton alloc] initWithFrame:CGRectMake(0, 0, 22, 25)];
		downButton.userInteractionEnabled = YES;
		downButton.tag = @"down";
		[downButton setBackgroundImage:[UIImage imageNamed:@"fontDown.png"] forState:UIControlStateNormal];
		[downButton addTarget:self action:@selector(changeTextSize:) forControlEvents:UIControlEventTouchDown];

		UIBarButtonItem *upTextBarItem = [[UIBarButtonItem alloc] initWithCustomView:upButton];
		UIBarButtonItem *downTextBarItem = [[UIBarButtonItem alloc] initWithCustomView:downButton];


		toolBar = [[MapToolBar alloc] initWithFrame:CGRectMake(0, 0, 345, MAP_HEIGHT/2)];
		toolBar.track = track;
		[toolBar setNeedsLayout];
		[toolBar setNeedsDisplay];
		UIBarButtonItem * mapButton = [[UIBarButtonItem alloc] initWithCustomView:toolBar];
		
		liveButton = [[UIButton alloc] initWithFrame:CGRectMake(3, 0, 45, MAP_HEIGHT - 6)];
		liveButton.backgroundColor = [UIColor clearColor];
		[liveButton setBackgroundImage:[UIImage imageNamed:@"topAndBottomRowSelected.png"] forState:UIControlStateNormal];
		[liveButton retain];
		[[liveButton layer] setCornerRadius:0.01f];
		[liveButton setTitleColor:[UIColor yellowColor] forState:UIControlStateNormal];
		[liveButton setTitleColor:[UIColor grayColor] forState:UIControlStateDisabled];
		[liveButton setTitle:@"Live" forState:UIControlStateNormal];
		[liveButton addTarget:self action:@selector(goLive) forControlEvents:UIControlEventTouchUpInside];
//		liveButton1 = [[UIBarButtonItem alloc] initWithTitle:@"Live" style:UIBarButtonItemStyleDone target:self action:@selector(goLive)];
		UIBarButtonItem * liveButton1 = [[UIBarButtonItem alloc] initWithCustomView:liveButton];
		
		NSArray *items = [NSArray arrayWithObjects: upTextBarItem, downTextBarItem, mapButton, liveButton1, nil];
		[naviToolBar setItems:items animated:NO];

		[self.view addSubview:naviToolBar];

		[liveButton1 release];
		
		//[self.view addSubview:toolBar];
		
		pointerText = [[[UILabel alloc] initWithFrame:CGRectMake(0,0, 25, 25)] autorelease];
		pointerText.text = @"";
		[pointerText setTextColor:[UIColor whiteColor]];
		pointerText.backgroundColor = [UIColor clearColor];
		[pointerText setFont:[UIFont boldSystemFontOfSize:12.0]];
		pointerText.textAlignment = UITextAlignmentCenter;
		
		UIImage * image = [UIImage imageNamed:@"red_marker.png"];
		
		CGSize newSize = CGSizeMake(25,25);
		UIGraphicsBeginImageContext( newSize );// a CGSize that has the size you want
		[image drawInRect:CGRectMake(0,0,newSize.width,newSize.height)];
		//image is the original UIImage
		UIImage* newImage = UIGraphicsGetImageFromCurrentImageContext();
		UIGraphicsEndImageContext();
		
		pointerImageView = [[UIImageView alloc] initWithImage:newImage];
		pointerImageView.frame = CGRectMake(-50, slider.bounds.origin.y + slider.bounds.size.height, newSize.width, newSize.height);
		[pointerImageView addSubview:pointerText];
		[self.view addSubview:pointerImageView];
		
//		if(appDelegate.mode == LIVE_MODE){
//
//			UIImage * tempImage = [UIImage imageNamed:@"whiteButton.png"];
//			CGSize newSize = CGSizeMake(2,30);
//			UIGraphicsBeginImageContext( newSize );// a CGSize that has the size you want
//			[tempImage drawInRect:CGRectMake(0,0,newSize.width,newSize.height)];
//			//image is the original UIImage
//			UIImage* newImage = UIGraphicsGetImageFromCurrentImageContext();
//			UIGraphicsEndImageContext();
//			
//			for(DataPage * page in trackData.pages){
//				
//				
//				UIImageView * tempView = [[UIImageView alloc] initWithImage:newImage];
//				[tempView setFrame:CGRectMake(((float)page.measure/(float)trackData.numMeasures)*(480 - MAP_TOOLBAR_INSET*2) + MAP_TOOLBAR_INSET, 
//											  293, 
//											  newSize.width, 
//											  newSize.height)];
//				tempView.tag = page;
//				[self.view addSubview:tempView];
//				[tempView release];
//				//[tempText release];
//			}
//		}
		
		myTimer = [[NSTimer alloc] init];
		
		CGFloat buttonWidth = MAP_TOOLBAR_INSET;
		CGFloat buttonHeight = MAP_HEIGHT;
//		liveButton = [[UIButton alloc] initWithFrame:CGRectMake(480 - MAP_TOOLBAR_INSET, 320 - MAP_HEIGHT, buttonWidth, MAP_HEIGHT)];
//		UIImage *newImage1 = [[UIImage imageNamed:@"whiteButton.png"] stretchableImageWithLeftCapWidth:12.0 topCapHeight:0.0];
//		[liveButton setBackgroundImage:newImage1 forState:UIControlStateNormal];		
//		[liveButton setTitle:@"Live" forState:UIControlStateNormal];
//		[liveButton addTarget:self action:@selector(goLive) forControlEvents:UIControlEventTouchUpInside];
//		
//		[self.view addSubview:liveButton];
		//[newImage1 release];
		
//		UIButton * menuButton = [[UIButton alloc] initWithFrame: CGRectMake(0,0, buttonWidth*3/4, MAP_HEIGHT + 5)];
//		menuButton.center = CGPointMake(MAP_TOOLBAR_INSET/2, 320 - MAP_HEIGHT/2);
//		//menuButton.frame =
//		UIImage * newImage2 = [UIImage imageNamed:@"menu.png"];
//		[menuButton setBackgroundImage:newImage1 forState:UIControlStateNormal];	
//		UIImageView * im = [[UIImageView alloc] initWithImage:newImage2];
//		im.center = CGPointMake(menuButton.frame.size.width/2, menuButton.frame.size.height/2);
//		[menuButton addSubview:im];
//		[menuButton addTarget:self action:@selector(showMenu) forControlEvents:UIControlEventTouchUpInside];
//		menuButton.backgroundColor = [UIColor clearColor];
//		[self.view addSubview:menuButton];
//		
//		[im release];
//		[menuButton release];
		
		
		//[newImage1 release];
	}
	return self;
}

- (void) changeTextSize:(id)sender {
	if( [((UIButton *)sender).tag isEqualToString:@"up"] ){
		int size = appDelegate.TEXT_SIZE + 1;
		if (size <= MAX_TEXT_SIZE) {
			appDelegate.TEXT_SIZE = size;
			currentPage.pageIndex = currentPage.pageIndex;
		}
		
	}
	else{
		int size = appDelegate.TEXT_SIZE - 1;
		if (size >= MIN_TEXT_SIZE) {
			appDelegate.TEXT_SIZE = size;
			currentPage.pageIndex = currentPage.pageIndex;
		}
	}
}

- (void) showMenu {
	[appDelegate.splashViewController.mainViewController fadeTabBar];
	
}

-(void) startTimer {
	myTimer = [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(checkUpdatePage:) userInfo:nil repeats:YES];// init timer to call onTime function once per second
}

-(void) stopTimer {
	if([myTimer isValid])
		[myTimer invalidate];
}

- (void) loadPages {
	if(!contentLoaded){
		for(int i=0; i < 1; i++){
			PageViewController * tempPage = [[PageViewController alloc] initWithTrack:self.trackData];
			tempPage.pageIndex = i;
			tempPage.view.frame = CGRectMake(i*480, 0, 480, 320);
			[scrollView addSubview:tempPage.view];
			//[tempPage retain];
			//[tempPage release];
		}	
		contentLoaded = YES;
	}
	
}

// Implement loadView to create a view hierarchy programmatically, without using a nib.
- (void)loadView {


//	pageControl = [[UIPageControl alloc] initWithFrame:CGRectMake(0, 0, appFrame.size.height, appFrame.size.width)];
//	pageControl.numberOfPages = [trackData.pages count];
//	pageControl.currentPage = 0;

	

	

//	UIBarButtonItem * rewindButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemRewind target:self action:@selector(rewindCallback)];
//	
	slider = [[UISlider alloc] init];
	CGRect rect = CGRectMake( 0, 0, 355, 10);
	//slider.autoresizingMask = UIViewAutoresizingFlexibleWidth| UIViewAutoresizingFlexibleHeight;
	slider.frame = rect;
	
	slider.maximumValue = [self.trackData numMeasures];
	slider.minimumValue = 1;
//	slider.backgroundColor = [UIColor clearColor];
//	[slider addTarget:self action:@selector(sliderCallback) forControlEvents:UIControlEventValueChanged];
//	[slider addTarget:self action:@selector(showSliderPosition) forControlEvents:UIControlEventTouchDown];
//	[slider addTarget:self action:@selector(sliderStopped) forControlEvents:UIControlEventTouchUpInside];


	

	

	
//	UIImage* leftImage = [UIImage imageNamed:@"SliderLeft.png"];   
//	[slider setMinimumTrackImage:leftImage forState:UIControlStateNormal];   
//	
//	UIImage* rightImage = [UIImage imageNamed:@"SliderRight.png"];
//	[slider setMaximumTrackImage:rightImage forState:UIControlStateNormal];
	
	
//	float arrowInsetSide = 20.0;
//	float arrowInsetTop = 10.0;
//	float arrowWidth = 25.0;
//	float arrowHeight = 23.0;
	
//	sliderMarkerText = [[[UILabel alloc] initWithFrame:CGRectMake(0,0, 30, 30)] autorelease];
//	sliderMarkerText.text = @"";
//	[sliderMarkerText setTextColor:[UIColor whiteColor]];
//	sliderMarkerText.backgroundColor = [UIColor clearColor];
//	[sliderMarkerText setFont:[UIFont boldSystemFontOfSize:15.0]];
//	sliderMarkerText.textAlignment = UITextAlignmentCenter;
//	
//	UIImage * image1 = [UIImage imageNamed:@"black_marker.png"];
//	
//	CGSize newSize = CGSizeMake(30,30);
//	UIGraphicsBeginImageContext( newSize );// a CGSize that has the size you want
//	[image1 drawInRect:CGRectMake(0,0,newSize.width,newSize.height)];
//	//image is the original UIImage
//	UIImage* newImage1 = UIGraphicsGetImageFromCurrentImageContext();
//	UIGraphicsEndImageContext();
//	measureMarkerImageView = [[UIImageView alloc] initWithImage:newImage1];
//	measureMarkerImageView.frame = CGRectMake(-50, slider.bounds.origin.y + slider.bounds.size.height, newSize.width, newSize.height);
//	[measureMarkerImageView addSubview:sliderMarkerText];
//	measureMarkerImageView.hidden = YES;
//	[self.view addSubview:measureMarkerImageView];
//	
//	leftArrow = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"left-arrow.png"]];
//	leftArrow.frame = CGRectMake(0, 0, 25,23);
//	leftArrow.center = CGPointMake(arrowWidth/2 + arrowInsetSide, arrowHeight/2 + arrowInsetTop);
//	leftArrow.alpha = 0.7;
//	//[self.view addSubview:leftArrow];
//	
//	slideLabel = [[[UILabel alloc] initWithFrame:CGRectMake(0,0, 180, 150)] autorelease];
//	[slideLabel setText:@"Tap the screen for more options."];
//	slideLabel.center = CGPointMake(240,320 - 70);
//	[slideLabel setFont:[UIFont fontWithName:@"Arial" size:13]];
//	[slideLabel setBackgroundColor:[UIColor clearColor]];
//	[slideLabel setTextColor:[UIColor blackColor]];
//	slideLabel.adjustsFontSizeToFitWidth = YES;
//	slideLabel.alpha = 0.7;
//	[slideLabel retain];
//	//[[self view] addSubview:slideLabel];
//	
//	stopBlinkingButton = [[UIButton buttonWithType:UIButtonTypeCustom] retain];
//	[stopBlinkingButton setFrame:CGRectMake(0, 0, 50, 50)];	
//	stopBlinkingButton.center = CGPointMake(240 + slideLabel.frame.size.width/2 + 15, slideLabel.center.y);
//	[stopBlinkingButton setImage:[UIImage imageNamed:@"x.png"] forState:UIControlStateNormal];
//	[stopBlinkingButton  addTarget:self action:@selector(stopBlinkyText) forControlEvents:UIControlEventTouchDown]; 
//	stopBlinkingButton.alpha = 0.7;
//	//[self.view addSubview:stopBlinkingButton];
//
//	
//	rightArrow = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"right-arrow.png"]];
//	rightArrow.frame = CGRectMake(0, 0, 25,23);
//	rightArrow.center = CGPointMake(480 - ( arrowWidth/2 + arrowInsetSide ), arrowHeight/2 + arrowInsetTop);
//	rightArrow.alpha = 0.7;
	//[self.view addSubview:rightArrow];
	
	//timer = [NSTimer scheduledTimerWithTimeInterval:2.0 target:self selector:@selector(startBlinkyText) userInfo:nil repeats:YES];
	


	
	

	// This is a hack for right now, because it forces the scrollview to repaint
	NSInteger pageIndex = 0;
	// update the scroll view to the appropriate page
    CGRect frame = scrollView.frame;
    frame.origin.x = frame.size.width * pageIndex;
    frame.origin.y = 0;
    [scrollView scrollRectToVisible:frame animated:YES];
//	
//	pageIndex = 0;
//	// update the scroll view to the appropriate page
//    frame = scrollView.frame;
//    frame.origin.x = 1;
//    frame.origin.y = 0;
//    [scrollView scrollRectToVisible:frame animated:NO];
//	Test1AppDelegate *appDelegate = (Test1AppDelegate *)[[UIApplication sharedApplication] delegate];



}



- (void)applyNewIndex:(NSInteger)newIndex pageController:(PageViewController *)pageController
{
	NSInteger pageCount = [trackData.pages count] ;
	BOOL outOfBounds = newIndex >= pageCount || newIndex < 0;
	
	if (!outOfBounds)
	{
		CGRect pageFrame = pageController.view.frame;
		pageFrame.origin.y = 0;
		pageFrame.origin.x = scrollView.frame.size.width * newIndex;
		pageController.view.frame = pageFrame;
	}
	else
	{
		CGRect pageFrame = pageController.view.frame;
		pageFrame.origin.y = scrollView.frame.size.height;
		pageController.view.frame = pageFrame;
	}
	
	[pageController setPageIndex:newIndex];
}


- (void)scrollViewDidScroll:(UIScrollView *)sender
{
    CGFloat pageWidth = scrollView.frame.size.width;
    float fractionalPage = scrollView.contentOffset.x / pageWidth;
	
	NSInteger lowerNumber = floor(fractionalPage);
	NSInteger upperNumber = lowerNumber + 1;
	
	
	if (lowerNumber == currentPage.pageIndex)
	{
		if (upperNumber != nextPage.pageIndex)
		{
			// forwards
			[self applyNewIndex:upperNumber pageController:nextPage];
		}
	}
	else if (upperNumber == currentPage.pageIndex)
	{
		if (lowerNumber != nextPage.pageIndex)
		{
			// back wards

			
			[self applyNewIndex:lowerNumber pageController:nextPage];
			
			//[self applyNewIndex:lowerNumber pageController:currentPage];
			//[self applyNewIndex:upperNumber pageController:currentPage];
//			PageViewController *swapController = currentPage;
//			currentPage = nextPage;
//			nextPage = swapController;

		}
	}
	else
	{
		if (lowerNumber == nextPage.pageIndex)
		{

			
			[self applyNewIndex:upperNumber pageController:currentPage];
		}
		else if (upperNumber == nextPage.pageIndex)
		{
			[self applyNewIndex:lowerNumber pageController:currentPage];
		}
		else
		{
			[self applyNewIndex:lowerNumber pageController:currentPage];
			[self applyNewIndex:upperNumber pageController:nextPage];
		}
	}
	
	[currentPage updateTextViews:NO];
	[nextPage updateTextViews:NO];
}

- (void)scrollViewDidEndScrollingAnimation:(UIScrollView *)newScrollView
{
	pageControlIsChangingPage = NO;

    CGFloat pageWidth = scrollView.frame.size.width;
    float fractionalPage = scrollView.contentOffset.x / pageWidth;
	NSInteger nearestNumber = lround(fractionalPage);
	
	if (currentPage.pageIndex != nearestNumber)
	{
		PageViewController *swapController = currentPage;
		currentPage = nextPage;
		nextPage = swapController;
	}
	
	[currentPage updateTextViews:YES];
}

- (void)scrollViewDidEndDecelerating:(UIScrollView *)newScrollView
{
	[self scrollViewDidEndScrollingAnimation:newScrollView];
	pageControl.currentPage = currentPage.pageIndex;
	
	if(pagePosistion != currentPage.pageIndex){
		if(appDelegate.mode == LIVE_MODE){
		userInterjected = TRUE;
		liveButton.enabled = TRUE;
		
		appDelegate.LIVE = NO;
		}
		else{
			liveButton.enabled = TRUE;
			
			appDelegate.LIVE = NO;
		}
	}
	
	pagePosistion = currentPage.pageIndex;
	
	if(appDelegate.mode == LIVE_MODE)
		[slider setValue:(float)(((float)pagePosistion/(float)[trackData.pages count])*trackData.numMeasures) animated:NO];
	

}

- (void) changePage
{
	NSInteger pageIndex = pageControl.currentPage;
	
	// update the scroll view to the appropriate page
    CGRect frame = scrollView.frame;
    frame.origin.x = frame.size.width * pageIndex;
    frame.origin.y = 0;
    [scrollView scrollRectToVisible:frame animated:YES];
	
	pageControlIsChangingPage = YES;

}


static BOOL showSlideFingerOption = TRUE;

-(void) stopBlinkyText {
	showSlideFingerOption = FALSE;
	slideLabel.hidden = YES;
	rightArrow.hidden = YES;
	leftArrow.hidden = YES;
	stopBlinkingButton.hidden = YES;
	[timer invalidate];
}

-(void) startBlinkyText {
	if(showSlideFingerOption){
		[UIView beginAnimations:nil context:nil]; // begins animation block
		[UIView setAnimationDuration:1.0];        // sets animation duration
		[UIView setAnimationDelegate:self];        // sets delegate for this block
		[UIView setAnimationDidStopSelector:@selector(finishedBlinkyText)];   // calls the finishedFading method when the animation is done (or done fading out)	
		slideLabel.alpha = 1.0;
		rightArrow.alpha = 1.0;
		leftArrow.alpha = 1.0;
		stopBlinkingButton.alpha = 1.0;
		[UIView commitAnimations];   // commits the animation block.  This Block is done.
	}
	else{
		[self stopBlinkyText];
	}
	
}

-(void) finishedBlinkyText {
	[UIView beginAnimations:nil context:nil]; // begins animation block
	[UIView setAnimationDuration:1.0];        // sets animation duration
	[UIView setAnimationDelegate:self];        // sets delegate for this block
	
	slideLabel.alpha = 0.0;
	rightArrow.alpha = 0.0;
	leftArrow.alpha = 0.0;
	stopBlinkingButton.alpha = 0.0;
	
	[UIView commitAnimations];   // commits the animation block.  This Block is done.
	
}

#pragma mark -
#pragma mark Button callbacks

- (void) rewindCallback {
	if(appDelegate.mode == LIVE_MODE){
		userInterjected = TRUE;
		liveButton.enabled = TRUE;

		appDelegate.LIVE = NO;
	
		[self goToPage:(pagePosistion - 1) animated:TRUE];
	
		[slider setValue:(float)(((float)pagePosistion/(float)[trackData.pages count])*trackData.numMeasures) animated:NO];
	}
	else{
		appDelegate.LIVE = NO;
		
		DataPage * page = [trackData pageWithLastTime:[appDelegate.player currentTime]];
		int newPagePosition = [trackData.pages indexOfObject:page] -1 ;
		if(newPagePosition >= 0){
			DataPage * next = [trackData.pages objectAtIndex:newPagePosition];
			appDelegate.player.currentTime = next.time;
		}
		
		appDelegate.LIVE = YES;
	}
	
}

- (void) forwardCallback {
	if(appDelegate.mode == LIVE_MODE){
		userInterjected = TRUE;
		liveButton.enabled = TRUE;

		appDelegate.LIVE = NO;
	
		[self goToPage:(pagePosistion + 1) animated:TRUE];
	
		[slider setValue:(float)(((float)pagePosistion/(float)[trackData.pages count])*trackData.numMeasures) animated:NO];
	}
	else{
		appDelegate.LIVE = NO;
		
		DataPage * page = [trackData pageWithLastTime:[appDelegate.player currentTime]];
		int newPagePosition = [trackData.pages indexOfObject:page] + 1;
		if(newPagePosition < [trackData.pages count]){
			DataPage * next = [trackData.pages objectAtIndex:newPagePosition];
			appDelegate.player.currentTime = next.time;
		}
		
		appDelegate.LIVE = YES;
	}
}

#pragma mark -
#pragma mark Slider clallbacks


BOOL sliderMoving = FALSE;

-(void) showSliderPosition {
	if(appDelegate.mode == LIVE_MODE){
		printf("Touched slider\n");
		sliderMarkerText.text = [NSString stringWithFormat:@"%d", (int)slider.value];
		float width = slider.bounds.size.width - 10;
		float percent = ((float)[slider value])/((float)trackData.numMeasures);
	
		measureMarkerImageView.center = CGPointMake(slider.frame.origin.x + percent*width, 280);
		measureMarkerImageView.hidden = FALSE;
	}
}

- (void) sliderCallback {
	appDelegate.LIVE = NO;
	sliderMoving = TRUE;
	if(appDelegate.mode == LIVE_MODE){

		sliderMarkerText.text = [NSString stringWithFormat:@"%d", (int)[slider value]];
		float width = slider.bounds.size.width - 10;
		float percent = ((float)[slider value])/((float)trackData.numMeasures);
		measureMarkerImageView.center = CGPointMake(slider.frame.origin.x + percent*(width), 280);
	}
	else{
		if(![appDelegate.player isPlaying]){
			[appDelegate.player play];
		}
	}
}

-(void) sliderStopped {
	int value = (int)[slider value];
	sliderMoving = FALSE;

	if(appDelegate.mode == LIVE_MODE){
		DataPage * page = [trackData pageWithLastAnnotation:value];
		int newPagePosition = [trackData.pages indexOfObject:page];
		
		if( newPagePosition != pagePosistion){
			userInterjected = TRUE;
			liveButton.enabled = TRUE;
			
			appDelegate.LIVE = NO;
			
			[self goToPage:newPagePosition animated:TRUE];
		}
		measureMarkerImageView.hidden = YES;
	}
	else{
		if(![appDelegate.player isPlaying]){
			[appDelegate.player play];
		}
		appDelegate.player.currentTime = slider.value;
		appDelegate.LIVE = YES;
	}
}

-(void)goLive {
	userInterjected = FALSE;
	liveButton.enabled = FALSE;
	//[liveButton setUserInteractionEnabled:NO];
	appDelegate.LIVE =  YES;
	

	if(![trackData.pieceName isEqualToString:appDelegate.CURRENT_PIECE]){
		
		[appDelegate.splashViewController.mainViewController goToLiveTabbar];

//		NSDictionary * trackArray = [[appDelegate.splashViewController mainViewController] arrayOfTracks];
//		NSMutableArray * trackStuff = [trackArray objectForKey:appDelegate.CURRENT_PIECE];
//
//		[appDelegate.splashViewController performSelectorOnMainThread:@selector(configureTracks:) withObject:trackStuff waitUntilDone:YES];
//		[appDelegate.splashViewController.pieceBarItem performSelectorOnMainThread:@selector(setTitle:) withObject:appDelegate.CURRENT_PIECE waitUntilDone:YES];
	
	}
	else{
		[self checkUpdatePage:nil];
	}
}


#pragma mark -
#pragma mark Update Page Timer

- (void)checkUpdatePage:(NSTimer *)timer {
	//currentMeasure = mainView.currentMeasureNumber;
	Test1AppDelegate *appDelegate = (Test1AppDelegate *)[[UIApplication sharedApplication] delegate];
	int currentMeasure = appDelegate.CURRENT_MEASURE;
	if(appDelegate.APPLICATION_STARTED && [trackData.pieceName isEqualToString:appDelegate.CURRENT_PIECE]){
		
		if(appDelegate.mode == LIVE_MODE){
		

				
			DataPage * page = [trackData pageWithLastAnnotation:currentMeasure];
			if(page){
			int newPagePosition = [trackData.pages indexOfObject:page];
			if (pagePosistion != newPagePosition && appDelegate.LIVE){
				[self goToPage:newPagePosition animated:TRUE];
				//pointerText.text = [NSString stringWithFormat:@"%d",currentMeasure];
				liveButton.enabled = NO;

			}
			}
//			if(appDelegate.LIVE)
//				[slider setValue:currentMeasure animated:NO];

			[pointerText performSelectorOnMainThread:@selector(setText:) withObject:[NSString stringWithFormat:@"%d",currentMeasure] waitUntilDone:YES];

			pointerImageView.frame = CGRectMake(((float)currentMeasure/(float)trackData.numMeasures)*(toolBar.frame.size.width) + toolBar.frame.origin.x - pointerImageView.bounds.size.width/2, 
												297 - pointerImageView.bounds.size.height,
												pointerImageView.bounds.size.width, 
												pointerImageView.bounds.size.height);
		}
		else{
			//printf("max: %f, dur: %f\n",slider.maximumValue, [appDelegate.player duration]);
//			if(slider.maximumValue != (int)[appDelegate.player duration]){
//				
//				slider.maximumValue = (int)[appDelegate.player duration];
//				UIImage * tempImage = [UIImage imageNamed:@"whiteButton.png"];
//				CGSize newSize = CGSizeMake(2,30);
//				UIGraphicsBeginImageContext( newSize );// a CGSize that has the size you want
//				[tempImage drawInRect:CGRectMake(0,0,newSize.width,newSize.height)];
//				//image is the original UIImage
//				UIImage* newImage = UIGraphicsGetImageFromCurrentImageContext();
//				UIGraphicsEndImageContext();
//				
//				for(DataPage * page in trackData.pages){
//
//					
//					UIImageView * tempView = [[UIImageView alloc] initWithImage:newImage];
//					[tempView setFrame:CGRectMake((page.time/slider.maximumValue)*(480 - MAP_TOOLBAR_INSET*2) + MAP_TOOLBAR_INSET, 
//												  293, 
//												  newSize.width, 
//												  newSize.height)];
//					tempView.tag = page;
//					[self.view addSubview:tempView];
//					[tempView release];
//					//[tempText release];
//				}
//			}

			DataPage * page = [trackData pageWithClosestTime:[appDelegate.player currentTime]];
			if(page){
			int newPagePosition = [trackData.pages indexOfObject:page];
			if (pagePosistion != newPagePosition && appDelegate.LIVE){
				[self goToPage:newPagePosition animated:TRUE];
				//pointerText.text = [NSString stringWithFormat:@"%d",currentMeasure];
				liveButton.enabled = NO;
				
			}
			
			
//			[pointerText performSelectorOnMainThread:@selector(setText:) withObject:[NSString stringWithFormat:@"%d",page.measure] waitUntilDone:YES];
			[pointerText performSelectorOnMainThread:@selector(setText:) withObject:[self timeToString:[appDelegate.player currentTime]] waitUntilDone:YES];
			
//			if(!sliderMoving)
//				slider.value = [appDelegate.player currentTime];
			
			
			pointerImageView.frame = CGRectMake(([appDelegate.player currentTime]/[appDelegate.player duration])*(toolBar.frame.size.width) + toolBar.frame.origin.x - pointerImageView.bounds.size.width/2, 
												300 - pointerImageView.bounds.size.height,
												pointerImageView.bounds.size.width, 
												pointerImageView.bounds.size.height);
			}
			
		}
	
	}
	else{
		liveButton.enabled = YES;
		pointerImageView.frame = CGRectMake(-50, 
											//imageView.frame.origin.y  - pointerImageView.bounds.size.height, 
											304 - pointerImageView.bounds.size.height,
											pointerImageView.bounds.size.width, 
											pointerImageView.bounds.size.height);
	}
	
	
	
	if(!showSlideFingerOption){
		slideLabel.hidden = YES;
		stopBlinkingButton.hidden = YES;
	}

	
}

- (NSString *) timeToString:(double) input{
	int seconds = (int)fmod(input, 60.0);
	int hours = (int)(input/60.0);
	
	if (seconds < 10)
		return [NSString stringWithFormat:@"%d:0%d",hours,seconds];
	else
		return [NSString stringWithFormat:@"%d:%d",hours,seconds];

}

#define PAGE_FLIP_TIME 0.75

-(void) goToPage:(NSInteger)index animated:(BOOL) animated{
	
	// are we within the bounds of the measures of the current piece ?
	if(index >= 0 && index <= [trackData.pages count] && index != pagePosistion ) {
		
		if (animated){
			
			//[self applyNewIndex:measure pageController:currentPage];
			
			// update the scroll view to the appropriate page
			CGRect frame = scrollView.frame;
			frame.origin.x = frame.size.width * (index);
			frame.origin.y = 0;
			[scrollView scrollRectToVisible:frame animated:!memoryWarning];
			
			//[slider setValue:((float)index/(float)[trackData.pages count])*(float)[trackData numMeasures] animated:NO];


		}
		else{

//			DataPage * page = [self.trackData pageWithLastAnnotation:measure];
//			if(page){
//				[measureLabel setText:[NSString stringWithFormat:@"%d",measure]];
//				
//				[textView setText:page.text];
//				
//				[slider setValue:measure animated:NO];
//
//			}

		}
		
		pagePosistion = index;

		
	}
	
	[self.view setNeedsLayout];
}

//- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event {
//    UITouch *touch = [touches anyObject];
//    startTouchPosition = [touch locationInView:[self view]];
//	printf("Touches in Navigation view\nx");
////	for(UIView * thisView in self.view.subviews){
////		if([thisView.tag isKindOfClass:[DataPage class]]){
////			//printf("%d\n",((DataPage *)(thisView.tag)).measure);
////
////			if(CGRectContainsPoint(thisView.frame, startTouchPosition)){
////				printf("%d\n",((DataPage *)(thisView.tag)).measure);
////				thisView.frame = CGRectMake(thisView.frame.origin.x, 
////											thisView.frame.origin.y, 
////											thisView.frame.size.width*3, thisView.frame.size.height*3);
////			}
////
////		}
////	}
//	
//}
//
//
//- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event {
//	
//    UITouch *touch = [touches anyObject];
//    CGPoint currentTouchPosition = [touch locationInView:[self view]];
//	
//    // To be a swipe, direction of touch must be horizontal and long enough.
//    if (fabsf(startTouchPosition.x - currentTouchPosition.x) >= HORIZ_SWIPE_DRAG_MIN &&
//        fabsf(startTouchPosition.y - currentTouchPosition.y) <= VERT_SWIPE_DRAG_MAX)
//    {
//        // It appears to be a swipe.	
//		if(!animating){
//			userInterjected = TRUE;
//			if (startTouchPosition.x < currentTouchPosition.x){
//				printf("Right Swipe\n");
//				//[self goToPage:(pagePosistion - 1) animated:TRUE];
//			}
//			else{
//				//[self goToPage:(pagePosistion + 1)  animated:TRUE];
//				printf("Left Swipe\n");
//			}
//			liveButton.enabled = YES;
//			animating = YES;
//		}
//		
//    }
//	else if (fabsf(startTouchPosition.x - currentTouchPosition.x) <= HORIZ_SWIPE_DRAG_MAX &&
//        fabsf(startTouchPosition.y - currentTouchPosition.y) >= VERT_SWIPE_DRAG_MIN)
//    {
//		if(!animating){
//			Test1AppDelegate *appDelegate = (Test1AppDelegate *)[[UIApplication sharedApplication] delegate];
//			if (startTouchPosition.y < currentTouchPosition.y){
//				[appDelegate.splashViewController chageTrackFromSwipe:FALSE];
//				printf("Down Swipe\n");
//			}
//			else{
//				[appDelegate.splashViewController chageTrackFromSwipe:TRUE];
//				printf("Up Swipe\n");
//			}
//			animating = YES;
//		}
//	}
//	
//}

- (void) slide:(BOOL) left
{
	CATransition* trans = [CATransition animation];
	[trans setType:kCATransitionReveal];
	[trans setDuration:0.5];
	if (!left)
		[trans setSubtype:(kCATransitionFromLeft)];
	else
		[trans setSubtype:(kCATransitionFromRight)];

	// code to change the view//
	[[self.view layer] addAnimation:trans forKey:@"Transition"];
}


- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event {
	
//	UITouch *touch = [touches anyObject];
//    CGPoint currentTouchPosition = [touch locationInView:[self view]];
//
//	// If we just touched the screen, show the 
//	if (fabsf(startTouchPosition.x - currentTouchPosition.x) <= HORIZ_SWIPE_DRAG_MIN &&
//        fabsf(startTouchPosition.y - currentTouchPosition.y) <= VERT_SWIPE_DRAG_MAX)
//    {
//		Test1AppDelegate *appDelegate = (Test1AppDelegate *)[[UIApplication sharedApplication] delegate];
//		[appDelegate.splashViewController fadeTabBar];
//		[appDelegate.splashViewController hideToolBar];
//		
//	}
//	
//	// reset the touch posistion
//	animating = NO;
//	startTouchPosition.x = 0.0;
//	startTouchPosition.y = 0.0;
	
}



// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.
//- (void)viewDidLoad {
//    [super viewDidLoad];
//	
//	[self changePage];
//
//	for (UIView *childView in self.view.subviews)
//	{
//		[childView setNeedsDisplay];
//		[childView setNeedsLayout];
//	}
//	
//
//
//
//}



// Override to allow orientations other than the default portrait orientation.
- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation {
    // Return YES for supported orientations
    return (interfaceOrientation == UIInterfaceOrientationLandscapeLeft || interfaceOrientation == UIInterfaceOrientationLandscapeRight);
}


- (void)didReceiveMemoryWarning {
	// Releases the view if it doesn't have a superview.
    [super didReceiveMemoryWarning];
	memoryWarning = YES;
	
	// Release any cached data, images, etc that aren't in use.
}

- (void)viewDidUnload {
	// Release any retained subviews of the main view.
	// e.g. self.myOutlet = nil;
}


- (void)dealloc {
	[measureLabel release];
	[textView release];
	[imageView release];
	[trackData release];
	[pointerImageView release];
	//[super imageView];
    [super dealloc];
}


@end
